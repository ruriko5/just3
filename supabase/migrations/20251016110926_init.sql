create table "public"."dones" (
    "id" bigint generated by default as identity not null,
    "title" text not null,
    "description" text,
    "userId" uuid not null default auth.uid(),
    "status" text not null default '''done'''::text,
    "wannaCreatedAt" timestamp with time zone,
    "todoCreatedAt" timestamp with time zone not null,
    "doneCreatedAt" timestamp with time zone not null default now()
);


alter table "public"."dones" enable row level security;

create table "public"."todos" (
    "id" bigint generated by default as identity not null,
    "todoCreatedAt" timestamp with time zone not null default now(),
    "title" text not null,
    "description" text,
    "userId" uuid not null default auth.uid(),
    "status" text not null default '''todo'''::text,
    "wannaCreatedAt" timestamp with time zone
);


alter table "public"."todos" enable row level security;

create table "public"."wannas" (
    "id" bigint generated by default as identity not null,
    "title" text not null,
    "description" text,
    "userId" uuid not null default auth.uid(),
    "status" text not null default '''wanna'''::text,
    "wannaCreatedAt" timestamp with time zone not null default now()
);


alter table "public"."wannas" enable row level security;

CREATE UNIQUE INDEX dones_pkey ON public.dones USING btree (id);

CREATE UNIQUE INDEX todos_pkey ON public.todos USING btree (id);

CREATE UNIQUE INDEX wannas_pkey ON public.wannas USING btree (id);

alter table "public"."dones" add constraint "dones_pkey" PRIMARY KEY using index "dones_pkey";

alter table "public"."todos" add constraint "todos_pkey" PRIMARY KEY using index "todos_pkey";

alter table "public"."wannas" add constraint "wannas_pkey" PRIMARY KEY using index "wannas_pkey";

alter table "public"."dones" add constraint "dones_description_check" CHECK ((length(description) <= 1024)) not valid;

alter table "public"."dones" validate constraint "dones_description_check";

alter table "public"."dones" add constraint "dones_status_check" CHECK ((status = 'done'::text)) not valid;

alter table "public"."dones" validate constraint "dones_status_check";

alter table "public"."dones" add constraint "dones_title_check" CHECK ((length(title) <= 256)) not valid;

alter table "public"."dones" validate constraint "dones_title_check";

alter table "public"."dones" add constraint "dones_userId_fkey" FOREIGN KEY ("userId") REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."dones" validate constraint "dones_userId_fkey";

alter table "public"."todos" add constraint "todos_description_check" CHECK ((length(description) <= 1024)) not valid;

alter table "public"."todos" validate constraint "todos_description_check";

alter table "public"."todos" add constraint "todos_status_check" CHECK ((status = 'todo'::text)) not valid;

alter table "public"."todos" validate constraint "todos_status_check";

alter table "public"."todos" add constraint "todos_title_check" CHECK ((length(title) <= 256)) not valid;

alter table "public"."todos" validate constraint "todos_title_check";

alter table "public"."todos" add constraint "todos_userId_fkey" FOREIGN KEY ("userId") REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."todos" validate constraint "todos_userId_fkey";

alter table "public"."wannas" add constraint "wannas_description_check" CHECK ((length(description) <= 1024)) not valid;

alter table "public"."wannas" validate constraint "wannas_description_check";

alter table "public"."wannas" add constraint "wannas_status_check" CHECK ((status = 'wanna'::text)) not valid;

alter table "public"."wannas" validate constraint "wannas_status_check";

alter table "public"."wannas" add constraint "wannas_title_check" CHECK ((length(title) <= 256)) not valid;

alter table "public"."wannas" validate constraint "wannas_title_check";

alter table "public"."wannas" add constraint "wannas_userId_fkey" FOREIGN KEY ("userId") REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."wannas" validate constraint "wannas_userId_fkey";

grant delete on table "public"."dones" to "anon";

grant insert on table "public"."dones" to "anon";

grant references on table "public"."dones" to "anon";

grant select on table "public"."dones" to "anon";

grant trigger on table "public"."dones" to "anon";

grant truncate on table "public"."dones" to "anon";

grant update on table "public"."dones" to "anon";

grant delete on table "public"."dones" to "authenticated";

grant insert on table "public"."dones" to "authenticated";

grant references on table "public"."dones" to "authenticated";

grant select on table "public"."dones" to "authenticated";

grant trigger on table "public"."dones" to "authenticated";

grant truncate on table "public"."dones" to "authenticated";

grant update on table "public"."dones" to "authenticated";

grant delete on table "public"."dones" to "service_role";

grant insert on table "public"."dones" to "service_role";

grant references on table "public"."dones" to "service_role";

grant select on table "public"."dones" to "service_role";

grant trigger on table "public"."dones" to "service_role";

grant truncate on table "public"."dones" to "service_role";

grant update on table "public"."dones" to "service_role";

grant delete on table "public"."todos" to "anon";

grant insert on table "public"."todos" to "anon";

grant references on table "public"."todos" to "anon";

grant select on table "public"."todos" to "anon";

grant trigger on table "public"."todos" to "anon";

grant truncate on table "public"."todos" to "anon";

grant update on table "public"."todos" to "anon";

grant delete on table "public"."todos" to "authenticated";

grant insert on table "public"."todos" to "authenticated";

grant references on table "public"."todos" to "authenticated";

grant select on table "public"."todos" to "authenticated";

grant trigger on table "public"."todos" to "authenticated";

grant truncate on table "public"."todos" to "authenticated";

grant update on table "public"."todos" to "authenticated";

grant delete on table "public"."todos" to "service_role";

grant insert on table "public"."todos" to "service_role";

grant references on table "public"."todos" to "service_role";

grant select on table "public"."todos" to "service_role";

grant trigger on table "public"."todos" to "service_role";

grant truncate on table "public"."todos" to "service_role";

grant update on table "public"."todos" to "service_role";

grant delete on table "public"."wannas" to "anon";

grant insert on table "public"."wannas" to "anon";

grant references on table "public"."wannas" to "anon";

grant select on table "public"."wannas" to "anon";

grant trigger on table "public"."wannas" to "anon";

grant truncate on table "public"."wannas" to "anon";

grant update on table "public"."wannas" to "anon";

grant delete on table "public"."wannas" to "authenticated";

grant insert on table "public"."wannas" to "authenticated";

grant references on table "public"."wannas" to "authenticated";

grant select on table "public"."wannas" to "authenticated";

grant trigger on table "public"."wannas" to "authenticated";

grant truncate on table "public"."wannas" to "authenticated";

grant update on table "public"."wannas" to "authenticated";

grant delete on table "public"."wannas" to "service_role";

grant insert on table "public"."wannas" to "service_role";

grant references on table "public"."wannas" to "service_role";

grant select on table "public"."wannas" to "service_role";

grant trigger on table "public"."wannas" to "service_role";

grant truncate on table "public"."wannas" to "service_role";

grant update on table "public"."wannas" to "service_role";

create policy "Enable delete for users based on userId"
on "public"."dones"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = "userId"));


create policy "Enable users to view their own data only"
on "public"."dones"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = "userId"));


create policy "Enable delete for users based on userId"
on "public"."todos"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = "userId"));


create policy "Enable insert for users based on userId"
on "public"."todos"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = "userId"));


create policy "Enable update for users based on userId"
on "public"."todos"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = "userId"))
with check ((( SELECT auth.uid() AS uid) = "userId"));


create policy "Enable users to view their own data only"
on "public"."todos"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = "userId"));


create policy "Enable delete for users based on userId"
on "public"."wannas"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = "userId"));


create policy "Enable insert for users based on userId"
on "public"."wannas"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = "userId"));


create policy "Enable update for users based on userId"
on "public"."wannas"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = "userId"))
with check ((( SELECT auth.uid() AS uid) = "userId"));


create policy "Enable users to view their own data only"
on "public"."wannas"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = "userId"));




